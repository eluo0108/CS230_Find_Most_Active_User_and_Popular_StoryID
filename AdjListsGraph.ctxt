#BlueJ class context
comment0.target=AdjListsGraph
comment1.params=
comment1.target=AdjListsGraph()
comment1.text=\n\ Constructor\ for\ AdjListsGraph\n
comment10.params=vertex
comment10.target=void\ removeVertex(java.lang.Object)
comment10.text=\ \n\ Removes\ the\ given\ vertex\ from\ this\ graph.\n\ If\ the\ given\ vertex\ does\ not\ exist,\ the\ graph\ does\ not\ change.\n\ \n\ @param\ the\ vertex\ to\ be\ removed\ from\ this\ graph\n
comment11.params=vertex1\ vertex2
comment11.target=void\ addArc(java.lang.Object,\ java.lang.Object)
comment11.text=\ \n\ Inserts\ an\ arc\ between\ two\ given\ vertices\ of\ this\ graph.\n\ if\ at\ least\ one\ of\ the\ vertices\ does\ not\ exist,\ the\ graph\ \n\ is\ not\ changed.\n\ \n\ public\ Vector<LinkedList<T>>\ arcs\ (\ [1,2]\ ,\ [1,3]\ )\n\ [\n\ \n\ @param\ the\ origin\ of\ the\ arc\ to\ be\ added\ to\ this\ graph\n\ @param\ the\ destination\ of\ the\ arc\ to\ be\ added\ to\ this\ graph\n\ \n
comment12.params=vertex1\ vertex2
comment12.target=void\ removeArc(java.lang.Object,\ java.lang.Object)
comment12.text=\ \n\ Removes\ the\ arc\ between\ two\ given\ vertices\ of\ this\ graph.\n\ If\ one\ of\ the\ two\ vertices\ does\ not\ exist\ in\ the\ graph,\n\ the\ graph\ does\ not\ change.\n\ \n\ @param\ the\ origin\ of\ the\ arc\ to\ be\ removed\ from\ this\ graph\n\ @param\ the\ destination\ of\ the\ arc\ to\ be\ removed\ from\ this\ graph\n\ \n
comment13.params=vertex1\ vertex2
comment13.target=void\ addEdge(java.lang.Object,\ java.lang.Object)
comment13.text=\ \n\ Inserts\ the\ edge\ between\ the\ two\ given\ vertices\ of\ this\ graph,\n\ if\ both\ vertices\ exist,\ else\ the\ graph\ is\ not\ changed.\n\ \n\ @param\ the\ origin\ of\ the\ edge\ to\ be\ added\ to\ this\ graph\n\ @param\ the\ destination\ of\ the\ edge\ to\ be\ added\ to\ this\ graph\n\ \n
comment14.params=vertex1\ vertex2
comment14.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment14.text=\ \n\ Removes\ the\ edge\ between\ the\ two\ given\ vertices\ of\ this\ graph,\n\ if\ both\ vertices\ exist,\ else\ the\ graph\ is\ not\ changed.\n\ \n\ @param\ the\ origin\ of\ the\ edge\ to\ be\ removed\ from\ this\ graph\n\ @param\ the\ destination\ of\ the\ edge\ to\ be\ removed\ from\ this\ graph\n\ \n
comment15.params=vertex
comment15.target=java.util.LinkedList\ getSuccessors(java.lang.Object)
comment15.text=\ \n\ Return\ all\ the\ vertices,\ in\ this\ graph,\ adjacent\ to\ the\ given\ vertex.\n\ \n\ @param\ A\ vertex\ in\ th\ egraph\ whose\ successors\ will\ be\ returned.\n\ @return\ LinkedList\ containing\ all\ the\ vertices\ x\ in\ the\ graph,\n\ for\ which\ an\ arc\ exists\ from\ the\ given\ vertex\ to\ x\ (vertex\ ->\ x).\n\n
comment16.params=vertex
comment16.target=java.util.LinkedList\ getPredecessors(java.lang.Object)
comment16.text=\ \n\ Return\ all\ the\ vertices\ x,\ in\ this\ graph,\ that\ precede\ a\ given\n\ vertex.\n\ \n\ @param\ A\ vertex\ in\ the\ graph\ whose\ predecessors\ will\ be\ returned.\n\ @return\ LinkedList\ containing\ all\ the\ vertices\ x\ in\ the\ graph,\n\ for\ which\ an\ arc\ exists\ from\ x\ to\ the\ given\ vertex\ (x\ ->\ vertex).\n\ \n
comment17.params=l
comment17.target=int\ findListSize(java.lang.Object)
comment17.text=\ \n\ Return\ size\ of\ a\ given\ linked\ list.\n\ This\ is\ a\ helper\ method\ for\ Investigate\ class.\n\ \n\ @param\ l\ linkedlist\ (within\ the\ vector\ arcs)\n\ @return\ int\ of\ list's\ size\n\ \n
comment18.params=l\ index
comment18.target=java.lang.String\ findListElement(java.lang.Object,\ int)
comment18.text=\ \n\ Return\ size\ of\ a\ given\ linked\ list.\ \n\ This\ is\ a\ helper\ method\ for\ Investigate\ class.\n\ \n\ @param\ l\ linkedlist\ (within\ the\ vector\ arcs)\n\ @param\ index\ the\ specific\ position\ the\ element\ is\ located\ in\ the\ linkedlist\n\ @return\ int\ of\ list's\ size\n\ \n
comment19.params=startIndex
comment19.target=java.util.Iterator\ iteratorDFS(int)
comment19.text=\ \n\ Returns\ iterator\ depth-first-search\n\ @param\ startIndex\ the\ position\ of\ the\ starting\ index\n\ @return\ Iterator\n
comment2.params=
comment2.target=java.lang.String\ toString()
comment2.text=\n\ toString\ method\n
comment20.params=
comment20.target=java.util.LinkedList\ iteratorBFS()
comment20.text=\ \n\ Returns\ iterator\ bredth-first-search\n\ @return\ Iterator\n
comment21.params=iter
comment21.target=java.lang.String\ BFSprintList(java.util.LinkedList)
comment21.text=\n\ Method\ printList\ prints\ out\ elements\ from\ BFS\n\n\ @param\ iter\ Linked\ List\ that\ contains\ all\ the\ vertices\ being\ itered\ through\n\ @return\ result\ in\ String\ format\n
comment22.params=
comment22.target=java.lang.String\ saveToTGF()
comment22.text=\ \n\ Turns\ graph\ into\ .tgf\ text\ (String)\n\ \n\ @param\ graph\n\ \n\ @return\ String\n\n1\ First\ node\ (u)\n2\ Second\ node\n\#\n1\ 2\ Edge\ between\ the\ two\n
comment23.params=inFileName
comment23.target=void\ convertCSV(java.io.File)
comment23.text=\ \n\ put\ .csv\ values\ into\ an\ AdjListsGraph\ obj\n\ .csv\ file\ to\ .tgf\ file\ \n\ .csv\ (user\ ID,\ all\ story\ IDs)\ ->\ .tgf\ (1\ "userID"\ 2\ "story\ ID"\ ...\ \#\ 1\ 2\ 2\ 1\ (1\ connected\ to\ everything)\n\ @param\ .csv\ file\n\ \n\ @return\ .tgf\ format\ text\ (String)\n
comment24.params=args
comment24.target=void\ main(java.lang.String[])
comment24.text=\n\ Depth-first\ search\ main\ method\ (testing)\n\ .csv\ reading\ method\ (testing)\n
comment3.params=
comment3.target=int\ getNumVertices()
comment3.text=\ \n\ Returns\ the\ number\ of\ vertices\ in\ this\ graph.\ \n\ \n\ @return\ the\ number\ of\ vertices\ in\ this\ graph\n
comment4.params=
comment4.target=int\ getNumArcs()
comment4.text=\ \n\ Returns\ the\ number\ of\ arcs\ in\ this\ graph.\n\ An\ arc\ between\ Verteces\ A\ and\ B\ exists,\ if\ a\ direct\ connection\n\ from\ A\ to\ B\ exists.\n\ \n\ @return\ the\ number\ of\ arcs\ in\ this\ graph\n
comment5.params=
comment5.target=boolean\ isEmpty()
comment5.text=\ \n\ Returns\ a\ boolean\ indicating\ whether\ this\ graph\ is\ empty\ or\ not.\n\ A\ graph\ is\ empty\ when\ it\ contains\ no\ vertice,and\ of\ course,\ no\ edges.\n\ \ \n\ \ @return\ true\ if\ this\ graph\ is\ empty,\ false\ otherwise.\n
comment6.params=vertex1\ vertex2
comment6.target=boolean\ isArc(java.lang.Object,\ java.lang.Object)
comment6.text=\ \n\ Returns\ true\ if\ an\ arc\ (direct\ connection)\ exists\ \n\ from\ the\ first\ vertex\ to\ the\ second,\ false\ otherwise\n\ \n\ @return\ true\ if\ an\ arc\ exists\ between\ the\ first\ given\ vertex\ (vertex1),\n\ and\ the\ second\ one\ (vertex2),false\ otherwise\n\ \n
comment7.params=vertex1\ vertex2
comment7.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment7.text=\ \n\ Returns\ true\ if\ an\ edge\ exists\ between\ two\ given\ vertices,\ i.e,\n\ an\ arch\ exists\ from\ the\ first\ vertex\ to\ the\ second\ one,\ and\ an\ arc\ from\n\ the\ second\ to\ the\ first\ vertex,\ false\ otherwise.\n\ \ \n\ @return\ true\ if\ an\ edge\ exists\ between\ vertex1\ and\ vertex2,\ \n\ false\ otherwise\n\ \n
comment8.params=
comment8.target=boolean\ isUndirected()
comment8.text=\ \n\ Returns\ true\ if\ the\ graph\ is\ undirected,\ that\ is,\ for\ every\n\ pair\ of\ nodes\ i,j\ for\ which\ there\ is\ an\ arc,\ the\ opposite\ arc\n\ is\ also\ present\ in\ the\ graph,\ false\ otherwise.\ \ \n\ \n\ @return\ true\ if\ the\ graph\ is\ undirected,\ false\ otherwise\n
comment9.params=vertex
comment9.target=void\ addVertex(java.lang.Object)
comment9.text=\ \n\ Adds\ the\ given\ vertex\ to\ this\ graph\n\ If\ the\ given\ vertex\ already\ exists,\ the\ graph\ does\ not\ change\n\ \n\ @param\ The\ vertex\ to\ be\ added\ to\ this\ graph\n
numComments=25
